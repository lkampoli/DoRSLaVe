---
title: "Exercise: Sydney Temperature Forecasting"
author: ""
format:
  html: default
  ipynb: default
---

This task will involve you forecasting tomorrow's maximum temperature using Bureau of Meteorology data for Sydney Airport.
The initial dataset is available [here](https://laub.au/ai/data/DC02D_Data_066037_9999999910249598.txt).

![DALL-E's rendition of this Sydney Airport maximum temperature forecasting task.](sydney-airport-temperature.jpg)

# The data

Start by reading the [data dictionary](https://laub.au/ai/data/DC02D_Notes_9999999910249598.txt) for the dataset.

Then load up the necessary packages.

```{python}
#| warning: false
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.impute import SimpleImputer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, MinMaxScaler
from sklearn.metrics import mean_squared_error as mse
from sklearn import set_config

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.callbacks import EarlyStopping

set_config(transform_output="pandas")
```

Load the data and inspect it.

```{python}
df = pd.read_csv("https://laub.au/ai/data/DC02D_Data_066037_9999999910249598.txt", low_memory=False).iloc[:-1]
df
```


# Preprocessing

Ensure that today's maximum temperature is stored as floating point numbers.

```{python}
df["Maximum temperature in 24 hours after 9am (local time) in Degrees C"] = df["Maximum temperature in 24 hours after 9am (local time) in Degrees C"].astype(float)
```

Create the target variable by shifting the temperature data by one day (and delete the final day which has no target).

```{python}
df["Tomorrow's Max Temperature"] = df["Maximum temperature in 24 hours after 9am (local time) in Degrees C"].shift(-1)
df = df.iloc[:-1]
```

Take a look at a subset of the data.

```{python}
df[["Year", "Month", "Day", "Maximum temperature in 24 hours after 9am (local time) in Degrees C", "Tomorrow's Max Temperature", ]]
```

Try plotting the data to see if there are any trends.

# Forecast using Sydney Airport's weather data

```{python}
# TODO: Split the data into training, validation and test sets.

```

```{python}
# TODO: Consider a different imputation for some variables.
# E.g. it may be the case that some missing values (like precipitation) are actually 0.
# Another idea may be to simply throw out some columns with too many missing values.
```

```{python}
# TODO: Rescale the data

```

```{python}
# TODO: Fit a neural network model
```

```{python}
# TODO: Report on the RMSE on the validation set (if comparing multiple NNs) and test sets (for the final/best model).
```

# Forecast using multiple Sydney weather stations' data

Download the [full dataset](https://laub.au/ai/data/BoM.zip).
It is in a similar format to the Sydney Airport dataset, but one file per weather station.
Incorporate the data from other weather stations into your model, without leaking future data into your forecasts.