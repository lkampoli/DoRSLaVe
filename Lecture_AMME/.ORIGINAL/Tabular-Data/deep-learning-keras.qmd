---
title: Deep Learning with Keras
execute:
    warning: false
---

```{python}
#| echo: false
#| warning: false
import os

# os.environ["KERAS_BACKEND"] = "torch"
os.environ["CUDA_VISIBLE_DEVICES"] = ""

import torch

torch.set_num_threads(1)

import matplotlib

# TODO: Update following section
import matplotlib.pyplot as plt
import cycler

colors = ["#91CCCC", "#FF8FA9", "#CC91BC", "#3F9999", "#A5FFB8"]
plt.rcParams["axes.prop_cycle"] = cycler.cycler(color=colors)


def set_square_figures():
    plt.rcParams["figure.figsize"] = (2.0, 2.0)


def set_rectangular_figures():
    plt.rcParams["figure.figsize"] = (5.0, 2.0)


set_rectangular_figures()
plt.rcParams["figure.dpi"] = 350
plt.rcParams["savefig.bbox"] = "tight"
plt.rcParams["font.family"] = "serif"

plt.rcParams["axes.spines.right"] = False
plt.rcParams["axes.spines.top"] = False


def square_fig():
    return plt.figure(figsize=(2, 2), dpi=350).gca()


def add_diagonal_line():
    xl = plt.xlim()
    yl = plt.ylim()
    shortestSide = min(xl[1], yl[1])
    plt.plot(
        [0, shortestSide],
        [0, shortestSide],
        color="black",
        linestyle="--",
    )


import pandas as pandas

pandas.options.display.max_rows = 6

import random

random.seed(1234)

import keras

keras.utils.set_random_seed(812)

import tensorflow

tensorflow.get_logger().setLevel("ERROR")
```

::: {.content-visible unless-format="revealjs"}

```{python}
#| code-fold: true
#| code-summary: Show the package imports
import random
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
```

:::

{{< include _keras-calif-housing-regression-demo.qmd >}}

::: {.content-hidden unless-format="revealjs"}

{{< include _regression-quiz.qmd >}}

:::

## Package Versions {.appendix data-visibility="uncounted"}

```{python}
from watermark import watermark
print(watermark(python=True, packages="keras,matplotlib,numpy,pandas,seaborn,scipy,torch,tensorflow,tf_keras"))
```

## Glossary {.appendix data-visibility="uncounted"}

::: columns
::: column
- callbacks
- cost/loss function
- early stopping
- epoch
- Keras, Tensorflow, PyTorch
:::
::: column
- matplotlib
- targets
- training/test split
- validation set
:::
:::