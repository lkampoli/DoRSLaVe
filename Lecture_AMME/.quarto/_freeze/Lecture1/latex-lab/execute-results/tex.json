{
  "hash": "8ee29598829f9c33563d84c3304e6247",
  "result": {
    "markdown": "---\ntitle: \"Lab: Markdown\"\nauthor: \"\"\nformat:\n  html: default\n  pdf: default\n---\n\nThat lab looks at how to incorporate Markdown and LaTeX into your Google Colab notebooks.\nThe purpose of this part of the lab is to enhance how you annotate your code.\nWith LaTeX, you can include equations into your notebooks.\n\n# Markdown\n\nMarkdown is a lightweight markup language that you can use to add formatting elements to plaintext text documents. It is widely used in the academic and technical communities for its simplicity and versatility. Markdown is easy to read and write, and it can be converted to HTML, PDF, and other formats.\n\nUnfortunately there isn't one standard Markdown syntax, but the most common one is [GitHub Flavored Markdown](https://guides.github.com/features/mastering-markdown/). This is the syntax that Google Colab uses.\n\n## Headers\n\nYou can create headers by using the `#` symbol. The number of `#` symbols you use will determine the size of the header. For example, `# Header 1` will create a large header, while `## Header 2` will create a smaller header.\n\n## Lists\n\nYou can create bulleted lists by using the `-` symbol. For example:\n\n```markdown\n- Item 1\n- Item 2\n- Item 3\n```\n\n- Item 1\n- Item 2\n- Item 3\n\nYou can also create numbered lists by using numbers followed by periods. For example:\n\n```markdown\n1. Item 1\n2. Item 2\n3. Item 3\n```\n\n1. Item 1\n2. Item 2\n3. Item 3\n\n## Emphasis\n\nYou can create emphasis by using the `*` or the `_` symbol.\n\n- For example, `*italic*` will create *italic* text, while `**bold**` will create **bold** text.\n- Equivalently, `_italic_` will create _italic_ text, while `__bold__` will create __bold__ text.\n\n## Links\n\nYou can create links by using the `[text](url)` syntax. For example, `[Google](https://www.google.com)` will create a link to [Google](https://www.google.com).\n\n## Images\n\nYou can include images by using the `![alt text](url)` syntax. For example, `![Google Logo](https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png)` will display the Google logo:\n\n![Google Logo](https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png)\n\n## Code\n\nYou can include code snippets by using the backtick symbol (\\`). For example, `` `print(\"Hello, World!\")` `` will display `print(\"Hello, World!\")`.\n\nYou can also create code blocks by using three backticks. For example:\n\n\\`\\`\\`python\nprint(\"Hello, World!\")\n\\`\\`\\`\n\nwill display:\n\n```python\nprint(\"Hello, World!\")\n```\n\n## Tables\n\nYou can create tables by using the `|` symbol to separate columns and `-` symbols to separate the header row from the content rows. For example:\n\n```markdown\n| Header 1 | Header 2 | Header 3 |\n|----------|----------|----------|\n| Row 1, Col 1 | Row 1, Col 2 | Row 1, Col 3 |\n| Row 2, Col 1 | Row 2, Col 2 | Row 2, Col 3 |\n```\n\nwill display:\n\n| Header 1 | Header 2 | Header 3 |\n|----------|----------|----------|\n| Row 1, Col 1 | Row 1, Col 2 | Row 1, Col 3 |\n| Row 2, Col 1 | Row 2, Col 2 | Row 2, Col 3 |\n\n# LaTeX\n\nYou can include LaTeX equations in your Markdown documents.\n\nLaTeX is a typesetting system commonly used in research and other technical fields. It enables users to create high-quality documents with professional-looking mathematical and scientific equations, figures, and tables.\n\nLaTeX has the ability to do all of the things that Markdown can do, and more.\nHowever, LaTeX has a steeper learning curve than Markdown, and it is not as widely used outside of academia and technical fields.\nNowadays, its unique selling point is its mathematical typesetting capabilities --- which is why Markdown's equations use LaTeX syntax.\n\nFor full LaTeX documents, you can install a desktop-based distribution such as [MikTeX](https://miktex.org/), or online using [Overleaf](https://overleaf.com/). However, in this lab we will just be looking at how you can incorporate LaTeX into Google Colab.\n\n## Inline equations and display mode\n\nThere are two ways you can incorporate LaTeX equations: either by using the `$$` notation or by using the `\\[\\]` notation.\n\nBy wrapping your equation in one dollar sign (`$`), you can write mathematical expressions in-line. For example, `$E = mc^2$` becomes $E = mc^2$.\n\nBy wrapping your equation in two dollar signs (`$$`), you can write mathematical expressions in \"display mode\", which puts expressions on a standalone line: `$$a^2 + b^2 = c^2.$$` becomes\n\n$$a^2 + b^2 = c^2.$$\n\nYou can also create mathematical expressions in display mode by wrapping your expression in `\\[` and `]\\` symbols. However, this does not seem to work in Google Colab for now, so we recommend using the dollar sign notation instead.\n\n## Mathematical notation\n\nUse braces `{}` if there are multiple terms in the exponent: `$x^{a+b}$` becomes $x^{a+b}$.\n\nInside a math environment, superscripts are denoted with (^) and subscripts denoted with (_). For example, `$a^b$ and $a_b$` become $a^b$ and $a_b$ respectively.\n<!-- Outside of the math environment, `superscript^2^ and subscript~2~` becomes superscript^2^ and subscript~2~. -->\n\nThere are many mathematical symbols that can be called upon using the backslash \\ followed by the name of the symbol, including Greek symbols. \n\n`$\\alpha, \\beta,  \\gamma, \\delta, \\pi, \\Pi, \\phi, \\Phi$`\n\n$\\alpha, \\beta,  \\gamma, \\delta, \\pi, \\Pi, \\phi, \\Phi$\n\nThere are far too many to list, and you can find a comprehensive list at [The Comprehensive LaTeX Symbol List - The CTAN archive](https://tug.ctan.org/info/symbols/comprehensive/symbols-a4.pdf)\n\nLaTeX has an equivalent of 'functions' (commands) which also start with backslash but take one or more arguments in braces.\nFor example, take the following equation for the area of a circle:\n\n$$ \\text{Area of Circle} = \\pi r^2 $$\n\nThis equation is represented by the following LaTeX code:\n\n\n\n```{latex}\n$$\\text{Area of Circle} = \\pi r^2$$\n```\n\n\nThe `\\text{}` command converts the text in the expression from italicised to non-italicised.\n\nOther commands include `\\frac{}{}` (which requires two arguments), `\\sqrt{}`, and `\\partial`:\n\n\n```{latex}\n$$\\frac{\\partial}{\\partial x} = \\sqrt{x}$$\n```\n\n\n$$ \\frac{\\partial}{\\partial x} = \\sqrt{x}$$\n\n## Matrices\n\nFor matrices with square brackets (braces), use `\\begin{bmatrix}  \\end{bmatrix}`\n\n    $$B = \\begin{bmatrix}\n     a & b & c \\\\\n     d & e & f \\\\\n     g & h & i\n    \\end{bmatrix}$$\n\n$$B = \\begin{bmatrix}\n  a & b & c \\\\\n  d & e & f \\\\\n  g & h & i\n \\end{bmatrix}$$\n\nFor matrices with parentheses, use ```\\begin{pmatrix}  \\end{pmatrix}```\n\n    $$\\sigma^2 = \\begin{pmatrix}\n    \\sigma_1^2 & \\sigma_{12} \\\\\n    \\sigma_{12} & \\sigma_2^2 \n    \\end{pmatrix}$$\n\n$$\\sigma^2 = \\begin{pmatrix}\n\\sigma_1^2 & \\sigma_{12} \\\\\n\\sigma_{12} & \\sigma_2^2 \n\\end{pmatrix}$$\n\nGeneral matrix notation (notice the `cdots`, `vdots`, and `ddots`) :\n\n    $A_{m,n} =\n    \\begin{pmatrix}\n     a_{1,1} & a_{1,2} & \\cdots & a_{1,n} \\\\\n     a_{2,1} & a_{2,2} & \\cdots & a_{2,n} \\\\\n    \\vdots & \\vdots & \\ddots & \\vdots \\\\\n     a_{m,1} & a_{m,2} & \\cdots & a_{m,n}\n    \\end{pmatrix}$\n\n$$A_{m,n} =\n\\begin{pmatrix}\n a_{1,1} & a_{1,2} & \\cdots & a_{1,n} \\\\\n a_{2,1} & a_{2,2} & \\cdots & a_{2,n} \\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\n a_{m,1} & a_{m,2} & \\cdots & a_{m,n}\n\\end{pmatrix}$$\n\n## Examples from last week's Lab\n\n- `$\\boldsymbol{z=Xw+b}$` produces  $\\boldsymbol{z=Xw+b}$,\n- Softmax function: `$\\sigma(z_{i}) = \\frac{e^{z_i}}{\\sum_{j=1}^K e^{z_j}}$` produces $\\sigma(z_{i}) = \\frac{\\mathrm{e}^{z_i}}{\\sum_{j=1}^K \\mathrm{e}^{z_j}}$.\n\n# RMarkdown and Quarto\n\nThe Jupyter Notebook experience separates code cells from Markdown cells.\nIt is more convenient for experimenting with code, and tasks where there is more coding than there is writing.\nHowever, for tasks where there is more writing than coding, it is more convenient to use RMarkdown or Quarto.\n\nRMarkdown is a variant of Markdown that allows you to include R code chunks in your document.\nIt runs the R code and includes the output in the document.\nIt has been around for many years, and I recommend watching Rob Hyndman's presentation on how he uses RMarkdown for nearly all his writing tasks.\n\n\n\n{{< video https://youtu.be/_D-ux3MqGug?si=ZTxJuAfUPpuS0yKA >}}\n\n\n\n\n\n[Quarto](https://quarto.org/) is a newer improvement on RMarkdown that supports Python, R, and many other programming languages, and improves upon RMarkdown in a number of ways.\n\nTo create a code chunk which will be executed, you can use the following syntax:\n\n```{{python}}\n#| label: fig-polar\n#| fig-cap: \"A line plot on a polar axis\"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n\nThis produces:\n\n::: {.cell execution_count=1}\n\n::: {.cell-output .cell-output-display}\n![A line plot on a polar axis](latex-lab_files/figure-pdf/fig-polar-output-1.pdf){#fig-polar}\n:::\n:::\n\n\nQuarto is the software I used to make this website, the lecture slides, my personal website ([https://laub.au/](https://laub.au/)) and much more.\nWhile I don't particularly recommend you use Quarto for your assignments, I do recommend you use it for your personal projects. \n\n# Acknowledgements\n\nThanks to Sam Luo & Eric Dong who contributed to the LaTeX section of the lab.\n\nI used GitHub Copilot to draft the earlier Markdown demonstrations. \n\n",
    "supporting": [
      "latex-lab_files/figure-pdf"
    ],
    "filters": []
  }
}