{
  "hash": "9df34c1deaaee52b2e6c45b9799578d6",
  "result": {
    "markdown": "---\ntitle: Lecture 2\nsubtitle: History of rocketry & LVs\n---\n\n<!--\n\n\n\n-->\n\n# The Typical Launch Vehicle Design Process {data-visibility=\"uncounted\"}\n\n## Space launch system\n\n![The major elements of a launch vehicle design process.](figs/fig1.9.png)\n\n## Spacecraft system\n\n![The design and operation of many spacecraft systems, shown in blue shading, depend heavily on the launch vehicle.](figs/fig1.10.png)\n\n## Typical Launch Vehicle Design Process\n\nThe typical LV design process begins with the development of mission\nrequirements and design constraints.\n\n![Launch vehicle design process.](figs/fig1.11.png)\n\n## Different goals of AI\n\nArtificial intelligence describes an agent which is capable of:\n\n----------------     -----------------------\nThinking humanly     Thinking rationally\nActing humanly       Acting rationally \n----------------     -----------------------\n\nAI eventually become dominated by one approach, called _machine learning_, which itself is now dominated by _deep learning_ (neural networks).\n\nThere are AI algorithms for simple tasks that don't use machine learning though.\n\n<!-- ## Expert systems -->\n\n## Shakey the Robot (~1966 -- 1972)\n\n::: {.columns}\n::: {.column width=\"30%\"}\n![Shakey the Robot](figs/SRI_Shakey_with_callouts.jpg)\n\n:::\n::: {.column width=\"70%\"}\n\n<br>\n\n\n\n{{< video https://www.youtube.com/embed/7bsEN8mwUB8 width=\"560\" height=\"315\" >}}\n\n\n\n\n\n:::\n:::\n\n::: footer\nSource: Wikipedia page for [the Shakey Project](https://en.wikipedia.org/wiki/File:SRI_Shakey_with_callouts.jpg)\n:::\n\n## Route-finding I {.smaller}\n\n::: columns\n::: {.column width=\"60%\"}\n<!-- ![Dijkstra's algorithm (1959).^[Source: Wikipedia page for [Dijkstra's algorithm](https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm).]](Dijkstras_progress_animation.gif) -->\n\n> At its core, a pathfinding method searches a graph by starting at one vertex and exploring adjacent nodes until the destination node is reached, generally with the intent of finding the cheapest route. Although graph searching methods such as a breadth-first search would find a route if given enough time, other methods, which \"explore\" the graph, would tend to reach the destination sooner. An analogy would be a person walking across a room; rather than examining every possible route in advance, the person would generally walk in the direction of the destination and only deviate from the path to avoid an obstruction, and make deviations as minor as possible. (Source: [Wikipedia](https://en.wikipedia.org/wiki/Pathfinding))\n\n:::\n::: {.column width=\"40%\"}\n\n<br>\n\n![A* algorithm (1968).](movie/Astar_progress_animation.gif)\n:::\n:::\n\n::: footer\nSource: Wikipedia page for [the A* search algorithm](https://en.wikipedia.org/wiki/A*_search_algorithm).\n:::\n\n## Route-finding II\n\n![[Tunes of the Kingdom: Evolving Physics and Sounds for ‘The Legend of Zelda: Tears of the Kingdom’](https://youtu.be/N-dPDsLTrTE?si=cwnV19wG1tS43e2b&t=3137 ), GDC 2024](figs/zelda-slide.png)\n\n\n## Evaluating a chess game I\n\nWho's winning this game?\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: figure\n\n::: {.cell execution_count=2}\n\n::: {.cell-output .cell-output-display execution_count=2}\n![](lecture2_files/figure-revealjs/cell-3-output-1.svg){}\n:::\n:::\n\n\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n::: {.cell execution_count=3}\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<table><tbody><tr><td style=\"text-align: center\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 45 45\" width=\"50px\" height=\"50px\"><g id=\"white-pawn\" class=\"white pawn\"><path d=\"M22.5 9c-2.21 0-4 1.79-4 4 0 .89.29 1.71.78 2.38C17.33 16.5 16 18.59 16 21c0 2.03.94 3.84 2.41 5.03-3 1.06-7.41 5.55-7.41 13.47h23c0-7.92-4.41-12.41-7.41-13.47 1.47-1.19 2.41-3 2.41-5.03 0-2.41-1.33-4.5-3.28-5.62.49-.67.78-1.49.78-2.38 0-2.21-1.79-4-4-4z\" fill=\"#fff\" stroke=\"#000\" stroke-width=\"1.5\" stroke-linecap=\"round\" /></g></svg></td><td style=\"text-align: center\">5 &times 1 = 5</td></tr><tr><td style=\"text-align: center\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 45 45\" width=\"50px\" height=\"50px\"><g id=\"white-knight\" class=\"white knight\" fill=\"none\" fill-rule=\"evenodd\" stroke=\"#000\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M 22,10 C 32.5,11 38.5,18 38,39 L 15,39 C 15,30 25,32.5 23,18\" style=\"fill:#ffffff; stroke:#000000;\" /><path d=\"M 24,18 C 24.38,20.91 18.45,25.37 16,27 C 13,29 13.18,31.34 11,31 C 9.958,30.06 12.41,27.96 11,28 C 10,28 11.19,29.23 10,30 C 9,30 5.997,31 6,26 C 6,24 12,14 12,14 C 12,14 13.89,12.1 14,10.5 C 13.27,9.506 13.5,8.5 13.5,7.5 C 14.5,6.5 16.5,10 16.5,10 L 18.5,10 C 18.5,10 19.28,8.008 21,7 C 22,7 22,10 22,10\" style=\"fill:#ffffff; stroke:#000000;\" /><path d=\"M 9.5 25.5 A 0.5 0.5 0 1 1 8.5,25.5 A 0.5 0.5 0 1 1 9.5 25.5 z\" style=\"fill:#000000; stroke:#000000;\" /><path d=\"M 15 15.5 A 0.5 1.5 0 1 1 14,15.5 A 0.5 1.5 0 1 1 15 15.5 z\" transform=\"matrix(0.866,0.5,-0.5,0.866,9.693,-5.173)\" style=\"fill:#000000; stroke:#000000;\" /></g></svg></td><td style=\"text-align: center\">0 &times 3 = 0</td></tr><tr><td style=\"text-align: center\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 45 45\" width=\"50px\" height=\"50px\"><g id=\"white-bishop\" class=\"white bishop\" fill=\"none\" fill-rule=\"evenodd\" stroke=\"#000\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><g fill=\"#fff\" stroke-linecap=\"butt\"><path d=\"M9 36c3.39-.97 10.11.43 13.5-2 3.39 2.43 10.11 1.03 13.5 2 0 0 1.65.54 3 2-.68.97-1.65.99-3 .5-3.39-.97-10.11.46-13.5-1-3.39 1.46-10.11.03-13.5 1-1.354.49-2.323.47-3-.5 1.354-1.94 3-2 3-2zM15 32c2.5 2.5 12.5 2.5 15 0 .5-1.5 0-2 0-2 0-2.5-2.5-4-2.5-4 5.5-1.5 6-11.5-5-15.5-11 4-10.5 14-5 15.5 0 0-2.5 1.5-2.5 4 0 0-.5.5 0 2zM25 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 1 1 5 0z\" /></g><path d=\"M17.5 26h10M15 30h15m-7.5-14.5v5M20 18h5\" stroke-linejoin=\"miter\" /></g></svg></td><td style=\"text-align: center\">2 &times 3 = 6</td></tr><tr><td style=\"text-align: center\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 45 45\" width=\"50px\" height=\"50px\"><g id=\"white-rook\" class=\"white rook\" fill=\"#fff\" fill-rule=\"evenodd\" stroke=\"#000\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M9 39h27v-3H9v3zM12 36v-4h21v4H12zM11 14V9h4v2h5V9h5v2h5V9h4v5\" stroke-linecap=\"butt\" /><path d=\"M34 14l-3 3H14l-3-3\" /><path d=\"M31 17v12.5H14V17\" stroke-linecap=\"butt\" stroke-linejoin=\"miter\" /><path d=\"M31 29.5l1.5 2.5h-20l1.5-2.5\" /><path d=\"M11 14h23\" fill=\"none\" stroke-linejoin=\"miter\" /></g></svg></td><td style=\"text-align: center\">2 &times 5 = 10</td></tr><tr><td style=\"text-align: center\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 45 45\" width=\"50px\" height=\"50px\"><g id=\"white-queen\" class=\"white queen\" fill=\"#fff\" fill-rule=\"evenodd\" stroke=\"#000\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M8 12a2 2 0 1 1-4 0 2 2 0 1 1 4 0zM24.5 7.5a2 2 0 1 1-4 0 2 2 0 1 1 4 0zM41 12a2 2 0 1 1-4 0 2 2 0 1 1 4 0zM16 8.5a2 2 0 1 1-4 0 2 2 0 1 1 4 0zM33 9a2 2 0 1 1-4 0 2 2 0 1 1 4 0z\" /><path d=\"M9 26c8.5-1.5 21-1.5 27 0l2-12-7 11V11l-5.5 13.5-3-15-3 15-5.5-14V25L7 14l2 12zM9 26c0 2 1.5 2 2.5 4 1 1.5 1 1 .5 3.5-1.5 1-1.5 2.5-1.5 2.5-1.5 1.5.5 2.5.5 2.5 6.5 1 16.5 1 23 0 0 0 1.5-1 0-2.5 0 0 .5-1.5-1-2.5-.5-2.5-.5-2 .5-3.5 1-2 2.5-2 2.5-4-8.5-1.5-18.5-1.5-27 0z\" stroke-linecap=\"butt\" /><path d=\"M11.5 30c3.5-1 18.5-1 22 0M12 33.5c6-1 15-1 21 0\" fill=\"none\" /></g></svg></td><td style=\"text-align: center\">0 &times 9 = 0</td></tr><tr><td style=\"text-align: center\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 45 45\" width=\"50px\" height=\"50px\"><g id=\"white-king\" class=\"white king\" fill=\"none\" fill-rule=\"evenodd\" stroke=\"#000\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M22.5 11.63V6M20 8h5\" stroke-linejoin=\"miter\" /><path d=\"M22.5 25s4.5-7.5 3-10.5c0 0-1-2.5-3-2.5s-3 2.5-3 2.5c-1.5 3 3 10.5 3 10.5\" fill=\"#fff\" stroke-linecap=\"butt\" stroke-linejoin=\"miter\" /><path d=\"M11.5 37c5.5 3.5 15.5 3.5 21 0v-7s9-4.5 6-10.5c-4-6.5-13.5-3.5-16 4V27v-3.5c-3.5-7.5-13-10.5-16-4-3 6 5 10 5 10V37z\" fill=\"#fff\" /><path d=\"M11.5 30c5.5-3 15.5-3 21 0m-21 3.5c5.5-3 15.5-3 21 0m-21 3.5c5.5-3 15.5-3 21 0\" /></g></svg></td><td style=\"text-align: center\">1 &times 0 = 0</td></tr><td style=\"text-align: center\">White</td><td style=\"text-align: center\">21</td></tr></tbody></table>\n```\n:::\n:::\n\n\n:::\n:::\n\n##  Evaluating a chess game II\n\nJust add up the pieces for each player.\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: figure\n\n::: {.cell execution_count=4}\n\n::: {.cell-output .cell-output-display execution_count=4}\n![](lecture2_files/figure-revealjs/cell-5-output-1.svg){}\n:::\n:::\n\n\n:::\n\n:::\n::: {.column width=\"50%\"}\n\n::: {.cell execution_count=5}\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<table><tbody><tr><td style=\"text-align: center\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 45 45\" width=\"50px\" height=\"50px\"><g id=\"black-pawn\" class=\"black pawn\"><path d=\"M22.5 9c-2.21 0-4 1.79-4 4 0 .89.29 1.71.78 2.38C17.33 16.5 16 18.59 16 21c0 2.03.94 3.84 2.41 5.03-3 1.06-7.41 5.55-7.41 13.47h23c0-7.92-4.41-12.41-7.41-13.47 1.47-1.19 2.41-3 2.41-5.03 0-2.41-1.33-4.5-3.28-5.62.49-.67.78-1.49.78-2.38 0-2.21-1.79-4-4-4z\" fill=\"#000\" stroke=\"#000\" stroke-width=\"1.5\" stroke-linecap=\"round\" /></g></svg></td><td style=\"text-align: center\">6 &times 1 = 6</td></tr><tr><td style=\"text-align: center\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 45 45\" width=\"50px\" height=\"50px\"><g id=\"black-knight\" class=\"black knight\" fill=\"none\" fill-rule=\"evenodd\" stroke=\"#000\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M 22,10 C 32.5,11 38.5,18 38,39 L 15,39 C 15,30 25,32.5 23,18\" style=\"fill:#000000; stroke:#000000;\" /><path d=\"M 24,18 C 24.38,20.91 18.45,25.37 16,27 C 13,29 13.18,31.34 11,31 C 9.958,30.06 12.41,27.96 11,28 C 10,28 11.19,29.23 10,30 C 9,30 5.997,31 6,26 C 6,24 12,14 12,14 C 12,14 13.89,12.1 14,10.5 C 13.27,9.506 13.5,8.5 13.5,7.5 C 14.5,6.5 16.5,10 16.5,10 L 18.5,10 C 18.5,10 19.28,8.008 21,7 C 22,7 22,10 22,10\" style=\"fill:#000000; stroke:#000000;\" /><path d=\"M 9.5 25.5 A 0.5 0.5 0 1 1 8.5,25.5 A 0.5 0.5 0 1 1 9.5 25.5 z\" style=\"fill:#ececec; stroke:#ececec;\" /><path d=\"M 15 15.5 A 0.5 1.5 0 1 1 14,15.5 A 0.5 1.5 0 1 1 15 15.5 z\" transform=\"matrix(0.866,0.5,-0.5,0.866,9.693,-5.173)\" style=\"fill:#ececec; stroke:#ececec;\" /><path d=\"M 24.55,10.4 L 24.1,11.85 L 24.6,12 C 27.75,13 30.25,14.49 32.5,18.75 C 34.75,23.01 35.75,29.06 35.25,39 L 35.2,39.5 L 37.45,39.5 L 37.5,39 C 38,28.94 36.62,22.15 34.25,17.66 C 31.88,13.17 28.46,11.02 25.06,10.5 L 24.55,10.4 z \" style=\"fill:#ececec; stroke:none;\" /></g></svg></td><td style=\"text-align: center\">1 &times 3 = 3</td></tr><tr><td style=\"text-align: center\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 45 45\" width=\"50px\" height=\"50px\"><g id=\"black-bishop\" class=\"black bishop\" fill=\"none\" fill-rule=\"evenodd\" stroke=\"#000\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M9 36c3.39-.97 10.11.43 13.5-2 3.39 2.43 10.11 1.03 13.5 2 0 0 1.65.54 3 2-.68.97-1.65.99-3 .5-3.39-.97-10.11.46-13.5-1-3.39 1.46-10.11.03-13.5 1-1.354.49-2.323.47-3-.5 1.354-1.94 3-2 3-2zm6-4c2.5 2.5 12.5 2.5 15 0 .5-1.5 0-2 0-2 0-2.5-2.5-4-2.5-4 5.5-1.5 6-11.5-5-15.5-11 4-10.5 14-5 15.5 0 0-2.5 1.5-2.5 4 0 0-.5.5 0 2zM25 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 1 1 5 0z\" fill=\"#000\" stroke-linecap=\"butt\" /><path d=\"M17.5 26h10M15 30h15m-7.5-14.5v5M20 18h5\" stroke=\"#fff\" stroke-linejoin=\"miter\" /></g></svg></td><td style=\"text-align: center\">1 &times 3 = 3</td></tr><tr><td style=\"text-align: center\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 45 45\" width=\"50px\" height=\"50px\"><g id=\"black-rook\" class=\"black rook\" fill=\"#000\" fill-rule=\"evenodd\" stroke=\"#000\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M9 39h27v-3H9v3zM12.5 32l1.5-2.5h17l1.5 2.5h-20zM12 36v-4h21v4H12z\" stroke-linecap=\"butt\" /><path d=\"M14 29.5v-13h17v13H14z\" stroke-linecap=\"butt\" stroke-linejoin=\"miter\" /><path d=\"M14 16.5L11 14h23l-3 2.5H14zM11 14V9h4v2h5V9h5v2h5V9h4v5H11z\" stroke-linecap=\"butt\" /><path d=\"M12 35.5h21M13 31.5h19M14 29.5h17M14 16.5h17M11 14h23\" fill=\"none\" stroke=\"#fff\" stroke-width=\"1\" stroke-linejoin=\"miter\" /></g></svg></td><td style=\"text-align: center\">2 &times 5 = 10</td></tr><tr><td style=\"text-align: center\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 45 45\" width=\"50px\" height=\"50px\"><g id=\"black-queen\" class=\"black queen\" fill=\"#000\" fill-rule=\"evenodd\" stroke=\"#000\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><g fill=\"#000\" stroke=\"none\"><circle cx=\"6\" cy=\"12\" r=\"2.75\" /><circle cx=\"14\" cy=\"9\" r=\"2.75\" /><circle cx=\"22.5\" cy=\"8\" r=\"2.75\" /><circle cx=\"31\" cy=\"9\" r=\"2.75\" /><circle cx=\"39\" cy=\"12\" r=\"2.75\" /></g><path d=\"M9 26c8.5-1.5 21-1.5 27 0l2.5-12.5L31 25l-.3-14.1-5.2 13.6-3-14.5-3 14.5-5.2-13.6L14 25 6.5 13.5 9 26zM9 26c0 2 1.5 2 2.5 4 1 1.5 1 1 .5 3.5-1.5 1-1.5 2.5-1.5 2.5-1.5 1.5.5 2.5.5 2.5 6.5 1 16.5 1 23 0 0 0 1.5-1 0-2.5 0 0 .5-1.5-1-2.5-.5-2.5-.5-2 .5-3.5 1-2 2.5-2 2.5-4-8.5-1.5-18.5-1.5-27 0z\" stroke-linecap=\"butt\" /><path d=\"M11 38.5a35 35 1 0 0 23 0\" fill=\"none\" stroke-linecap=\"butt\" /><path d=\"M11 29a35 35 1 0 1 23 0M12.5 31.5h20M11.5 34.5a35 35 1 0 0 22 0M10.5 37.5a35 35 1 0 0 24 0\" fill=\"none\" stroke=\"#fff\" /></g></svg></td><td style=\"text-align: center\">0 &times 9 = 0</td></tr><tr><td style=\"text-align: center\"><svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 45 45\" width=\"50px\" height=\"50px\"><g id=\"black-king\" class=\"black king\" fill=\"none\" fill-rule=\"evenodd\" stroke=\"#000\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M22.5 11.63V6\" stroke-linejoin=\"miter\" /><path d=\"M22.5 25s4.5-7.5 3-10.5c0 0-1-2.5-3-2.5s-3 2.5-3 2.5c-1.5 3 3 10.5 3 10.5\" fill=\"#000\" stroke-linecap=\"butt\" stroke-linejoin=\"miter\" /><path d=\"M11.5 37c5.5 3.5 15.5 3.5 21 0v-7s9-4.5 6-10.5c-4-6.5-13.5-3.5-16 4V27v-3.5c-3.5-7.5-13-10.5-16-4-3 6 5 10 5 10V37z\" fill=\"#000\" /><path d=\"M20 8h5\" stroke-linejoin=\"miter\" /><path d=\"M32 29.5s8.5-4 6.03-9.65C34.15 14 25 18 22.5 24.5l.01 2.1-.01-2.1C20 18 9.906 14 6.997 19.85c-2.497 5.65 4.853 9 4.853 9M11.5 30c5.5-3 15.5-3 21 0m-21 3.5c5.5-3 15.5-3 21 0m-21 3.5c5.5-3 15.5-3 21 0\" stroke=\"#fff\" /></g></svg></td><td style=\"text-align: center\">1 &times 0 = 0</td></tr><td style=\"text-align: center\">Black</td><td style=\"text-align: center\">22</td></tr></tbody></table>\n```\n:::\n:::\n\n\n:::\n:::\n\n::: fragment\nOverall: 21 &minus; 22 = &minus;1.\n:::\n\n## The minimax algorithm\n\n::: columns\n::: column\n![The minimax algorithm for chess.](figs/chess_minimax.png)\n:::\n::: column\n![Pseudocode for the minimax algorithm.](figs/sebastian-lague-minimax-pseudocode.png)\n:::\n:::\n\n::: footer\nSource: codeRtime, [Programming a simple minimax chess engine in R](https://www.codertime.org/minimax-chess-engine-programming-r/), and Sebastian Lague (2018), [Algorithms Explained – minimax and alpha-beta pruning](https://youtu.be/l-hh51ncgDI).\n:::\n\n## Chess\n\nDeep Blue (1997)\n\n::: columns\n::: {.column width=\"68%\"}\n![Gary Kasparov playing Deep Blue.](figs/deep-blue.jpeg)\n:::\n::: {.column width=\"28%\"}\n![Cartoon of the match.](figs/deep-blue-cartoon.l2005-6.telegraph1131746-matt-pritchett.jpeg)\n:::\n:::\n\n::: footer\nSources: Mark Robert Anderson (2017), [Twenty years on from Deep Blue vs Kasparov](https://theconversation.com/twenty-years-on-from-deep-blue-vs-kasparov-how-a-chess-match-started-the-big-data-revolution-76882), The Conversation article, and [Computer History Museum](https://www.computerhistory.org/chess/stl-431e1a079ea63/).\n:::\n\n## Machine Learning\n\nTried *making a computer smart*, too hard!\n\nMake a computer that can **learn** to be smart.\n\n![The Venn diagram of Artificial Intelligence, Machine Learning, and Deep Learning.](AI-vs-ML-vs-Deep-Learning.png)\n\n::: footer\nSource: Edureka (2020), [AI Vs Machine Learning Vs Deep Learning Edureka](https://www.edureka.co/blog/ai-vs-machine-learning-vs-deep-learning).\n:::\n\n## Definition\n\n::: columns \n::: {.column width=\"55%\"}\n\n> \"[Machine Learning is the] field of study that gives computers the ability to learn without being explicitly programmed\"\nArthur Samuel (1959)\n\n:::\n::: {.column width=\"45%\"}\n![](xkcd-machine_learning_2x.png)\n:::\n:::\n\n::: footer\nSource: Randall Munroe (2017), [xkcd #1838: Machine Learning](https://xkcd.com/1838/).\n:::\n\n<!--\n## Traditional AI versus ML\n\n<br>\n\n::: columns\n::: column\n![The traditional approach.](Geron-mls2_0101.png)\n:::\n::: column\n![The machine learning approach.](Geron-mls2_0102.png)\n:::\n:::\n\n:::footer\nSource: Aurélien Géron (2019), _Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow_, 2nd Edition, Figures 1-1 and 1-2.\n:::\n\n## Benefits of ML\n\n<br>\n\n::: columns\n::: {.column .aligned-column}\n![Machine learning can automatically adapt to change.](Geron-mls2_0103.png)\n:::\n::: {.column .aligned-column}\n![Machine learning can help humans to learn.](Geron-mls2_0104.png)\n::::\n:::\n\n:::footer\nSource: Aurélien Géron (2019), _Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow_, 2nd Edition, Figures 1-3 and 1-4.\n:::\n-->\n\n# Deep Learning Successes (Images) {data-visibility=\"uncounted\"}\n\n## Image Classification I\n\n::: columns\n::: {.column width=\"40%\"}\nWhat is this?\n![](mystery1.jpg)\n:::\n::: {.column width=\"10%\"}\n:::\n::: column\nOptions:\n\n\n\n```{=html}\n<ol type=\"1\">\n<li><span title=\"1.10%\">punching bag</span></li>\n<li><span title=\"11.87%\">goblet</span></li>\n<li><span title=\"0.71%\">red wine</span></li>\n<li><span title=\"1.21%\">hourglass</span></li>\n<li><span title=\"31.25%\">balloon</span></li>\n</ol>\n```\n\n\n\n::: {.callout-note}\nHover over the options to see AI's prediction (i.e. the probability of the photo being in that category).\n:::\n\n:::\n:::\n\n::: footer\nSource: [Wikipedia](https://en.wikipedia.org/wiki/Balloon#/media/File:Congrats_bqt.jpg)\n:::\n\n## Image Classification II\n\n::: columns\n::: column\nWhat is this?\n\n![](mystery2.jpg)\n:::\n::: column\nOptions:\n\n\n\n```{=html}\n<ol type=\"1\">\n<li><span title=\"0.11%\">sea urchin</span></li>\n<li><span title=\"0.71%\">porcupine</span></li>\n<li><span title=\"41.32%\">echidna</span></li>\n<li><span title=\"0.24%\">platypus</span></li>\n<li><span title=\"0.11%\">quill</span></li>\n</ol>\n```\n\n\n:::\n:::\n\n::: footer\nSource: [Wikipedia](https://en.wikipedia.org/wiki/Echidna#/media/File:Short-beaked_echidna_in_ANBG.jpg)\n:::\n\n## Image Classification III\n\n::: columns\n::: column\nWhat is this?\n\n![](mystery3.jpg)\n:::\n::: column\nOptions:\n\n\n\n```{=html}\n<ol type=\"1\">\n<li><span title=\"0.72%\">dingo</span></li>\n<li><span title=\"50.70%\">malinois</span></li>\n<li><span title=\"1.18%\">German shepherd</span></li>\n<li><span title=\"0.37%\">muzzle</span></li>\n<li><span title=\"2.24%\">kelpie</span></li>\n</ol>\n```\n\n\n:::\n:::\n\n::: footer\nSource: [Wikipedia](https://en.wikipedia.org/wiki/File:Malinois_Shepherd3.JPG)\n:::\n\n## ImageNet Challenge\n\n[ImageNet](https://www.image-net.org/index.php) and the _ImageNet Large Scale Visual Recognition Challenge (ILSVRC)_; originally [1,000 synsets](https://image-net.org/challenges/LSVRC/2014/browse-synsets).\n\n![AlexNet --- a neural network developed by Alex Krizhevsky, Ilya Sutskever, and Geoffrey Hinton --- won the ILSVRC 2012 challenge convincingly.](AlexNet-Results.png)\n\n::: footer\nSource: James Briggs & Laura Carnevali, [_AlexNet and ImageNet: The Birth of Deep Learning_](https://www.pinecone.io/learn/series/image-search/imagenet/), Embedding Methods for Image Search, Pinecone Blog\n:::\n\n## How were the images labelled? {.smaller}\n\n::: columns\n::: column\n![The original 'mechanical turk' (1770)](mechanical-turk.jpeg)\n:::\n::: column\n> \"Two years later, the first version of ImageNet was released with 12 million images structured and labeled in line with the WordNet ontology. If one person had annotated one image/minute and did nothing else in those two years (including sleeping or eating), it would have taken 22 years and 10 months.\n>\n> To do this in under two years, Li turned to Amazon Mechanical Turk, a crowdsourcing platform where anyone can hire people from around the globe to perform tasks cost-effectively.\"\n:::\n:::\n\n::: footer\nSources: Editors of Encyclopaedia Britannica, [The Mechanical Turk: AI Marvel or Parlor Trick?](https://www.britannica.com/story/the-mechanical-turk-ai-marvel-or-parlor-trick), and <br>\nJames Briggs & Laura Carnevali, [_AlexNet and ImageNet: The Birth of Deep Learning_](https://www.pinecone.io/learn/series/image-search/imagenet/), Embedding Methods for Image Search, Pinecone Blog\n:::\n\n## Needed a graphics card\n\n::: columns\n::: column\nA graphics processing unit (GPU)\n\n![My deep learning PC](deep-learning-pc.jpg)\n\n:::\n::: column\n\n> \"**4.2. Training on multiple GPUs**\nA single GTX 580 GPU has only 3GB of memory, which limits the maximum size of the networks that can be trained on it. It turns out that 1.2 million training examples are enough to train networks which are too big to fit on one GPU. Therefore we spread the net across two GPUs.\"\n\n:::\n:::\n\n::: footer\nSource: Krizhevsky, Sutskever and Hinton (2017), [_ImageNet Classification with Deep Convolutional Neural Networks_](https://dl.acm.org/doi/pdf/10.1145/3065386), Communications of the ACM \n:::\n\n## Lee Sedol plays AlphaGo (2016)\n\nDeep Blue was a win for AI, AlphaGo a win for ML.\n\n![Lee Sedol playing AlphaGo AI](New-Yorker-House-Alpha-Go-2.jpeg) \n\nI highly recommend [this documentary about the event](https://youtu.be/WXuK6gekU1Y).\n\n::: footer\nSource: Patrick House (2016), [AlphaGo, Lee Sedol, and the Reassuring Future of Humans and Machines](https://www.newyorker.com/tech/annals-of-technology/alphago-lee-sedol-and-the-reassuring-future-of-humans-and-machines), New Yorker article.\n:::\n\n## Generative Adversarial Networks (2014)\n\n[https://thispersondoesnotexist.com/](https://thispersondoesnotexist.com/)\n\n::: columns\n::: column\n![A GAN-generated face](thispersondoesnotexist1.jpg)\n:::\n::: column\n![A GAN-generated face](thispersondoesnotexist2.jpg)\n:::\n:::\n\n## Diffusion models\n\n::: columns\n::: column\n![Painting of avocado skating while wearing a hoodie](DALL·E 2022-08-03 12.56.46 - painting of avocado skating while wearing a hoodie.png)\n:::\n::: column\n![A surrealist painting of an alpaca studying for an exam](DALL·E 2022-08-03 13.02.20 - a surrealist painting of an alpaca studying for an exam.png)\n:::\n:::\n\n::: footer\nSource: Dall-E 2 images, prompts by ACTL3143 students in 2022.\n:::\n\n## Dall-E 2 (2022) vs Dall-E 3 (2023) {.smaller}\n\nSame prompt: \"A beautiful calm photorealistic view of an waterside metropolis that has been neglected for hundreds of years and is overgrown with nature\"\n\n::: columns\n::: column\n![Dall-E 2](DALL·E 2023-10-15 20.25.57 - A beautiful calm photorealistic view of an waterside metropolis that has been neglected for hundreds of years and is overgrown with nature.png)\n:::\n::: column\n![Dall-E 3](DALL·E 2023-10-15 20.25.11 - Photo of a once-majestic metropolis by the water, now abandoned for centuries. The city's skyscrapers and buildings are cloaked in thick green vines a.png)\n:::\n:::\n\n::: footer\nDall-E 3 rewrites it as: \"Photo of a once-majestic metropolis by the water, now abandoned for centuries. The city's skyscrapers and buildings are cloaked in thick green vines...\"\n:::\n\n# Deep Learning Successes (Text) {data-visibility=\"uncounted\"}\n\n## GPT\n\n::: columns\n::: {.column width=\"50%\"}\n![AI predictions in the classification demo were from GPT code.](ChatGPT-4o-example.png)\n:::\n::: {.column width=\"50%\"}\n**Homework** Get ChatGPT to:\n\n- generate images\n- translate code\n- explain code\n- run code\n- analyse a dataset\n- critique code\n- critique writing\n- voice chat with you\n\nCompare to Copilot.\n\n:::\n:::\n\n::: footer\nSource: [ChatGPT conversation](https://chatgpt.com/share/e/d5ba6b79-45ec-444d-a748-437834dae6e2).\n:::\n\n## Code generation (GitHub Copilot)\n\n\n\n{{< video assignmentexplain-Smallest.mp4 >}}\n\n\n\n\n\n::: footer\nSource: [GitHub Blog](https://github.blog/2022-09-08-github-copilot-now-available-for-teachers/)\n:::\n\n## Students get Copilot for free {.smaller}\n\n::: columns\n::: column\n![Use a free trial then sign up for free education account](copilot__1_.png)\n:::\n::: column\nA student post from last year:\n\n> I strongly recommend taking a photo holding up your Academic Statement to your phone's front facing camera when getting verified for the student account on GitHub. No other method of taking/uploading photo proofs worked for me. Furthermore, I had to make sure the name on the statement matched my profile exactly and also had to put in a bio. \n>\n> Good luck with this potentially annoying process!\n:::\n:::\n\n**Homework** It's a slow process, so get this going early.\n\n::: footer\nSource: [GitHub Education for Students](https://github.com/edu/students)\n:::\n\n## Programmers are increasingly using AI\n\n![Question: What is your experience with the following AI tools?](jetbrains-2023-dev-survey-ai-tools.png)\n\n::: footer\nSource: JetBrains, [The State of Developer Ecosystem 2023](https://www.jetbrains.com/lp/devecosystem-2023/ai/#ai_tools_experience).\n:::\n\n# Classifying Machine Learning Tasks {data-visibility=\"uncounted\"}\n\n## A taxonomy of problems\n\n::: columns\n::: {.column width=\"60%\"}\n![Machine learning categories in ACTL3142.](kaggle-types-of-ml-problems.jpg)\n:::\n::: {.column width=\"40%\"}\nNew ones:\n\n- Reinforcement learning\n- Semi-supervised learning\n- Active learning\n\n:::\n:::\n\n::: footer\nSource: Kaggle, [Getting Started](https://www.kaggle.com/getting-started/169622).\n:::\n\n## Supervised learning\n\nThe main focus of this course.\n\n### Regression\n\n- Given policy $\\hookrightarrow$ predict the rate of claims.\n- Given policy $\\hookrightarrow$ predict claim severity.\n- Given a reserving triangle $\\hookrightarrow$ predict future claims.\n\n### Classification\n\n- Given a claim $\\hookrightarrow$ classify as fraudulent or not.\n- Given a customer $\\hookrightarrow$ predict customer retention patterns.\n\n## Supervised learning: mathematically\n\n![A recipe for supervised learning.](recipe-for-supervised-ml.png)\n\n::: footer\nSource: Matthew Gormley (2021), [Introduction to Machine Learning Lecture Slides](https://www.cs.cmu.edu/~mgormley/courses/10601-s17/slides/lecture20-backprop.pdf), Slide 67.\n:::\n\n## Self-supervised learning\n\nData which 'labels itself'. Example: language model.\n\n<center>\n![](Chaudhary-nlp-ssl-causal-language-modeling-steps.png)\n</center>\n\n!['Autoregressive' (e.g. GPT) versus 'masked' model (e.g. BERT).](Chaudhary-nlp-ssl-masked-lm.png)\n\n\n::: footer\nSource: Amit Chaudhary (2020), [Self Supervised Representation Learning in NLP](https://amitness.com/2020/05/self-supervised-learning-nlp/).\n:::\n\n## Example: image inpainting\n\n::: columns\n::: {.column width=\"33%\"}\n![Original image](inpainting-input.jpg)\n:::\n::: {.column width=\"33%\"}\n![Randomly remove a part](inpainting-missing.jpg)\n:::\n::: {.column width=\"33%\"}\n![Try to fill it in from context](inpainting-generative-fill.jpg)\n:::\n:::\n\nOther examples: image super-resolution, denoising images.\n\n::: footer\nSee Liu et al. (2018), [Image Inpainting for Irregular Holes using Partial Convolutions](https://arxiv.org/pdf/1804.07723.pdf).\n:::\n\n\n## Example: Deoldify images #1\n\n<!-- Could show Hindenburg Disaster in colour video -->\n\n![A deoldified version of the famous \"Migrant Mother\" photograph.](deoldify-migrant-mother.jpeg)\n\n:::footer\nSource: [Deoldify package](https://github.com/jantic/DeOldify).\n:::\n\n## Example: Deoldify images #2\n\n![A deoldified Golden Gate Bridge under construction.](deoldify-golden-gate-bridge.jpeg)\n\n:::footer\nSource: [Deoldify package](https://github.com/jantic/DeOldify).\n:::\n\n# Neural Networks {data-visibility=\"uncounted\"}\n\n## How do real neurons work?\n\n::: {.content-hidden unless-format=\"revealjs\"}\n\n\n{{< video https://www.youtube.com/embed/6qS83wD29PY width=\"100%\" height=\"80%\" >}}\n\n\n\n\n:::\n::: {.content-visible unless-format=\"revealjs\"}\n\n\n{{< video https://www.youtube.com/embed/6qS83wD29PY >}}\n\n\n\n\n:::\n\n## A neuron 'firing'\n\n::: {.content-visible unless-format=\"revealjs\"}\nSimilar to a biological neuron, an artificial neuron 'fires' when the combined input information exceeds a certain threshold. This activation can be seen as a step function. The difference is that the artificial neuron uses mathematical rules (e.g. weighted sum) to 'fire' whereas 'firing' in the biological neurons is far more complex and dynamic.\n:::\n\n::: {.cell execution_count=6}\n\n::: {.cell-output .cell-output-display}\n![](lecture2_files/figure-revealjs/cell-7-output-1.png){}\n:::\n:::\n\n\n## An artificial neuron \n\n![A neuron in a neural network with a ReLU activation.](single-neuron.png)\n\n::: {.content-visible unless-format=\"revealjs\"}\nThe figure shows how we first compute the weighted sum of inputs, and then evaluate the summation using the step function. If the weighted sum is greater than the pre-set threshold, the neuron `fires'. \n:::\n\n::: footer\nSource: Marcus Lautier (2022).\n:::\n\n## One neuron\n\n::: columns\n::: {.column width=\"55%\"}\n$$ \\begin{aligned}\n  z~=~&x_1 \\times w_1 + \\\\\n    &x_2 \\times w_2 + \\\\\n    &x_3 \\times w_3 . \n  \\end{aligned}\n$$\n\n$$\n  a = \\begin{cases}\n    z & \\text{if } z > 0 \\\\\n    0 & \\text{if } z \\leq 0\n    \\end{cases}\n$$\n\nHere, $x_1$, $x_2$, $x_3$ is just some fixed data.\n\n:::\n::: {.column width=\"45%\"}\n![A neuron in a neural network with a ReLU activation.](single-neuron.png)\n:::\n:::\n\nThe weights $w_1$, $w_2$, $w_3$ should be 'learned'.\n\n::: footer\nSource: Marcus Lautier (2022).\n:::\n\n## One neuron with bias\n\n::: {.content-visible unless-format=\"revealjs\"} \nThe bias is a constant term added to the product of inputs and weights. It helps in shifting the entire activation function to either the negative or positive side. This shifting can either accelerate or delay the activation. For example, if the bias is negative, it will shift the entire curve to the right, making the activation harder. This is similar to delaying the activation.\n::: \n\n\n::: columns\n::: {.column width=\"55%\"}\n$$ \\begin{aligned}\n  z~=~&x_1 \\times w_1 + \\\\\n    &x_2 \\times w_2 + \\\\\n    &x_3 \\times w_3 + b .\n  \\end{aligned}\n$$\n\n$$\n  a = \\begin{cases}\n    z & \\text{if } z > 0 \\\\\n    0 & \\text{if } z \\leq 0\n    \\end{cases}\n$$\n\nThe weights $w_1$, $w_2$, $w_3$ and bias $b$ should be 'learned'.\n:::\n::: {.column width=\"45%\"}\n\n::: {.panel-tabset}\n\n### Bias = -4\n\n::: {.cell execution_count=7}\n\n::: {.cell-output .cell-output-display}\n![](lecture2_files/figure-revealjs/cell-8-output-1.png){}\n:::\n:::\n\n\n### 0\n\n::: {.cell execution_count=8}\n\n::: {.cell-output .cell-output-display}\n![](lecture2_files/figure-revealjs/cell-9-output-1.png){}\n:::\n:::\n\n\n### 4\n\n::: {.cell execution_count=9}\n\n::: {.cell-output .cell-output-display}\n![](lecture2_files/figure-revealjs/cell-10-output-1.png){}\n:::\n:::\n\n\n:::\n:::\n:::\n\n## A basic neural network\n\n![A basic fully-connected/dense network.](basic-neural-network.png)\n\n::: {.content-visible unless-format=\"revealjs\"}\nThis neural network consists of an input layer with 2 neurons ($x_1, x_2$), an output layer with 3 neurons, and 1 hidden layer with 4 neurons. Since every neuron is linked to every other neuron, this is called a fully connected neural network. Since we have 2 inputs and 1 bias in the input layer, each neuron in the hidden layer has 2+1=3 parameters to learn. Similarly, there are 4 neurons and 1 bias in the hidden layer. Hence, each neuron in the output layer has 4+1=5 parameters to learn.\n:::\n \n::: footer\nSource: Marcus Lautier (2022).\n:::\n\n## Step-function activation\n\n### Perceptrons\n\nBrains and computers are binary, so make a perceptron with binary data.\nSeemed reasonable, impossible to train.\n\n### Modern neural network\n\nReplace binary state with continuous state.\nStill rather slow to train.\n\n::: {.callout-note}\nIt's a neur**al** network made of neur**on**s, not a \"neuron network\".\n:::\n\n## Try different activation functions\n\n::: {.cell execution_count=10}\n\n::: {.cell-output .cell-output-display}\n![](lecture2_files/figure-revealjs/cell-11-output-1.png){}\n:::\n:::\n\n\n::: {.content-visible unless-format=\"revealjs\"}\nActivation functions are essential for a neural network design. They provide the mathematical rule for 'firing' the neuron. There are many activation functions, and the choice of the activation function depends on the problem we are trying to solve. Note: If we use the 'linear' activation function at every neuron, then the regression learning problem becomes a simple linear regression. But if we use 'ReLu', 'tanh', or any other non-linear function, then, we can introduce non-linearity into the model so that the model can learn complex non-linear patterns in the data. There are activation functions in both the hidden layers and the output layer. The activation function in the hidden layer controls how the neural network learns complex non-linear patterns in the training data. The choice of activation function in the output layer determines the type of predictions we get.  \n:::\n\n## Flexible\n\n> One can show that an MLP is a **universal approximator**, meaning \n> it can model any suitably smooth function, given enough hidden units,\n> to any desired level of accuracy (Hornik 1991). One can either make\n> the model be \"wide\" or \"deep\"; the latter has some advantages...\n\n::: footer\nSource: Murphy (2012), Machine Learning: A Probabilistic Perspective, 1st Ed, p. 566.\n:::\n\n## Feature engineering {.smaller}\n\n::: columns\n::: {.column width=\"55%\"}\n![](feature-engineering.png)\n:::\n::: {.column width=\"45%\"}\n![](facial-recognition.jpeg)\n![](modelling-ratio.png)\n:::\n:::\nDoesn't mean deep learning is always the best option!\n\n::: {.content-visible unless-format=\"revealjs\"}\nA major part of traditional machine learning (TML) involves conducting feature engineering to extract relevant features manually. In contrast, representational learning does not involve heavy manual feature engineering, rather, it learns relevant features automatically from data during the task. Therefore, the effort spent on feature engineering in representational learning is minimal compared to TML.\n:::\n\n::: footer\nSources: Marcus Lautier (2022) & Fenjiro (2019), [_Face Id: Deep Learning for Face Recognition_](https://medium.com/@fenjiro/face-id-deep-learning-for-face-recognition-324b50d916d1), Medium.\n:::\n\n## Quiz\n\nIn this ANN, how many of the following are there:\n\n::: columns\n::: {.column width=\"32%\"}\n\n- features,\n- targets,\n- weights,\n- biases, and\n- parameters?\n\nWhat is the depth?\n\n:::\n::: {.column width=\"68%\"}\n![An artificial neural network.](neural-network-circles.png)\n:::\n:::\n\n::: {.content-visible unless-format=\"revealjs\"}\nThere are three inputs, hence, three features. There is one neuron in the output layer, hence, one target. There are $3 \\times 4 + 4 \\times 4 + 4\\times 1 = 32$ arrows, hence, there are 32 weights in total. Since there is 1 bias for each neuron, there are 9 biases in total. The number of total parameters to learn equals to the sum of weights and biases, hence, there are $32+9=41$ parameters in total. \n:::\n\n::: footer\nSource: Dertat (2017), [_Applied Deep Learning - Part 1: Artificial Neural Networks_](https://towardsdatascience.com/applied-deep-learning-part-1-artificial-neural-networks-d7834f67a4f6), Medium.\n:::\n\n## Package Versions {.appendix data-visibility=\"uncounted\"}\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nfrom watermark import watermark\nprint(watermark(python=True, packages=\"keras,matplotlib,numpy,pandas,seaborn,scipy,torch,tensorflow,tf_keras\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPython implementation: CPython\nPython version       : 3.11.9\nIPython version      : 8.27.0\n\nkeras     : 3.5.0\nmatplotlib: 3.9.2\nnumpy     : 1.26.4\npandas    : 2.2.2\nseaborn   : 0.13.2\nscipy     : 1.11.0\ntorch     : 2.4.1\ntensorflow: 2.17.0\ntf_keras  : 2.17.0\n\n```\n:::\n:::\n\n\n## Glossary {.appendix data-visibility=\"uncounted\"}\n\n::: columns\n::: column\n- activations, activation function\n- artificial neural network\n- biases (in neurons)\n- classification problem\n- deep network, network depth\n- dense or fully-connected layer\n- feed-forward neural network\n- labelled/unlabelled data\n- machine learning\n:::\n::: column\n- minimax algorithm\n- neural network architecture\n- perceptron\n- ReLU\n- representation learning\n- sigmoid activation function\n- targets\n- weights (in a neuron)\n:::\n:::\n\n",
    "supporting": [
      "lecture2_files/figure-revealjs"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}